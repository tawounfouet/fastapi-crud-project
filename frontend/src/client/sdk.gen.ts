// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AuthenticationLoginData, AuthenticationLoginResponse, AuthenticationLoginAccessTokenData, AuthenticationLoginAccessTokenResponse, AuthenticationRefreshTokenData, AuthenticationRefreshTokenResponse, AuthenticationSignupData, AuthenticationSignupResponse, AuthenticationLogoutData, AuthenticationLogoutResponse, AuthenticationRequestPasswordResetData, AuthenticationRequestPasswordResetResponse, AuthenticationResetPasswordData, AuthenticationResetPasswordResponse, AuthenticationChangePasswordData, AuthenticationChangePasswordResponse, AuthenticationGetAuthStatusResponse, AuthenticationTestTokenResponse, DemoCreateProductData, DemoCreateProductResponse, DemoReadProductsData, DemoReadProductsResponse, DemoReadProductData, DemoReadProductResponse, DemoUpdateProductData, DemoUpdateProductResponse, DemoDeleteProductData, DemoDeleteProductResponse, DemoCreateOrderData, DemoCreateOrderResponse, DemoReadOrdersData, DemoReadOrdersResponse, DemoReadOrderData, DemoReadOrderResponse, DemoUpdateOrderData, DemoUpdateOrderResponse, DemoGetDashboardStatsResponse, PrivateCreateUserData, PrivateCreateUserResponse, UsersGetUsersData, UsersGetUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersGetCurrentUserInfoResponse, UsersDeleteCurrentUserResponse, UsersUpdateCurrentUserData, UsersUpdateCurrentUserResponse, UsersUpdateCurrentUserPasswordData, UsersUpdateCurrentUserPasswordResponse, UsersGetUserByIdData, UsersGetUserByIdResponse, UsersUpdateUserByIdData, UsersUpdateUserByIdResponse, UsersDeleteUserByIdData, UsersDeleteUserByIdResponse, UsersActivateUserData, UsersActivateUserResponse, UsersDeactivateUserData, UsersDeactivateUserResponse, UsersPromoteUserToSuperuserData, UsersPromoteUserToSuperuserResponse, UsersGetCurrentUserSessionsResponse, UsersInvalidateCurrentUserSessionsResponse, UsersGetCurrentUserProfileResponse, UsersUpdateCurrentUserProfileData, UsersUpdateCurrentUserProfileResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AuthenticationService {
    /**
     * Login user
     * Authenticate user and return access token with optional refresh token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static login(data: AuthenticationLoginData): CancelablePromise<AuthenticationLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * OAuth2 compatible login
     * OAuth2 compatible token login, get an access token for future requests.
     * @param data The data for the request.
     * @param data.formData
     * @returns TokenResponse Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: AuthenticationLoginAccessTokenData): CancelablePromise<AuthenticationLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Refresh access token
     * Get a new access token using a refresh token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TokenResponse Successful Response
     * @throws ApiError
     */
    public static refreshToken(data: AuthenticationRefreshTokenData): CancelablePromise<AuthenticationRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/refresh',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register new user
     * Create a new user account.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SignupResponse Successful Response
     * @throws ApiError
     */
    public static signup(data: AuthenticationSignupData): CancelablePromise<AuthenticationSignupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Logout user
     * Logout user and invalidate tokens.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthMessage Successful Response
     * @throws ApiError
     */
    public static logout(data: AuthenticationLogoutData): CancelablePromise<AuthenticationLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/logout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Request password reset
     * Request a password reset token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PasswordResetTokenResponse Successful Response
     * @throws ApiError
     */
    public static requestPasswordReset(data: AuthenticationRequestPasswordResetData): CancelablePromise<AuthenticationRequestPasswordResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/password-recovery',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset password
     * Reset password using a reset token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthMessage Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: AuthenticationResetPasswordData): CancelablePromise<AuthenticationResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Change password
     * Change password for authenticated user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthMessage Successful Response
     * @throws ApiError
     */
    public static changePassword(data: AuthenticationChangePasswordData): CancelablePromise<AuthenticationChangePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get authentication status
     * Get current authentication status and permissions.
     * @returns AuthStatusResponse Successful Response
     * @throws ApiError
     */
    public static getAuthStatus(): CancelablePromise<AuthenticationGetAuthStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/auth/status'
        });
    }
    
    /**
     * Test access token
     * Test if the current access token is valid.
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<AuthenticationTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/test-token'
        });
    }
    
}

export class DemoService {
    /**
     * Create Product
     * Create new product
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductPublic Successful Response
     * @throws ApiError
     */
    public static createProduct(data: DemoCreateProductData): CancelablePromise<DemoCreateProductResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/demo/products/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Products
     * Retrieve products with optional filtering
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.category
     * @param data.isActive
     * @returns ProductsPublic Successful Response
     * @throws ApiError
     */
    public static readProducts(data: DemoReadProductsData = {}): CancelablePromise<DemoReadProductsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/demo/products/',
            query: {
                skip: data.skip,
                limit: data.limit,
                category: data.category,
                is_active: data.isActive
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Product
     * Get product by ID
     * @param data The data for the request.
     * @param data.productId
     * @returns ProductPublic Successful Response
     * @throws ApiError
     */
    public static readProduct(data: DemoReadProductData): CancelablePromise<DemoReadProductResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/demo/products/{product_id}',
            path: {
                product_id: data.productId
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Product
     * Update product
     * @param data The data for the request.
     * @param data.productId
     * @param data.requestBody
     * @returns ProductPublic Successful Response
     * @throws ApiError
     */
    public static updateProduct(data: DemoUpdateProductData): CancelablePromise<DemoUpdateProductResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/demo/products/{product_id}',
            path: {
                product_id: data.productId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Product
     * Delete product (soft delete)
     * @param data The data for the request.
     * @param data.productId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteProduct(data: DemoDeleteProductData): CancelablePromise<DemoDeleteProductResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/demo/products/{product_id}',
            path: {
                product_id: data.productId
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Order
     * Create new order
     * @param data The data for the request.
     * @param data.requestBody
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static createOrder(data: DemoCreateOrderData): CancelablePromise<DemoCreateOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/demo/orders/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Orders
     * Retrieve orders
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.status
     * @returns OrdersPublic Successful Response
     * @throws ApiError
     */
    public static readOrders(data: DemoReadOrdersData = {}): CancelablePromise<DemoReadOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/demo/orders/',
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Order
     * Get order by ID
     * @param data The data for the request.
     * @param data.orderId
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static readOrder(data: DemoReadOrderData): CancelablePromise<DemoReadOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/demo/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Order
     * Update order (status, notes)
     * @param data The data for the request.
     * @param data.orderId
     * @param data.requestBody
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static updateOrder(data: DemoUpdateOrderData): CancelablePromise<DemoUpdateOrderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/demo/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Dashboard Stats
     * Get dashboard statistics (admin only)
     * @returns DashboardStats Successful Response
     * @throws ApiError
     */
    public static getDashboardStats(): CancelablePromise<DemoGetDashboardStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/demo/dashboard/stats/',
            errors: {
                404: 'Not found'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Get all users
     * Retrieve a list of all users. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.skip Number of users to skip
     * @param data.limit Maximum number of users to return
     * @param data.isActive Filter by active status
     * @param data.isSuperuser Filter by superuser status
     * @returns UsersListOutput Successful Response
     * @throws ApiError
     */
    public static getUsers(data: UsersGetUsersData = {}): CancelablePromise<UsersGetUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit,
                is_active: data.isActive,
                is_superuser: data.isSuperuser
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create a new user
     * Create a new user. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get current user
     * Get the current authenticated user's information.
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static getCurrentUserInfo(): CancelablePromise<UsersGetCurrentUserInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete current user
     * Delete the current authenticated user's account.
     * @returns MessageOutput Successful Response
     * @throws ApiError
     */
    public static deleteCurrentUser(): CancelablePromise<UsersDeleteCurrentUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update current user
     * Update the current authenticated user's information.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static updateCurrentUser(data: UsersUpdateCurrentUserData): CancelablePromise<UsersUpdateCurrentUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update current user password
     * Update the current authenticated user's password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MessageOutput Successful Response
     * @throws ApiError
     */
    public static updateCurrentUserPassword(data: UsersUpdateCurrentUserPasswordData): CancelablePromise<UsersUpdateCurrentUserPasswordResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get user by ID
     * Get a specific user by their ID.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static getUserById(data: UsersGetUserByIdData): CancelablePromise<UsersGetUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update user by ID
     * Update a specific user by their ID. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static updateUserById(data: UsersUpdateUserByIdData): CancelablePromise<UsersUpdateUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete user by ID
     * Delete a specific user by their ID. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.userId
     * @returns MessageOutput Successful Response
     * @throws ApiError
     */
    public static deleteUserById(data: UsersDeleteUserByIdData): CancelablePromise<UsersDeleteUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Activate user
     * Activate a user account. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static activateUser(data: UsersActivateUserData): CancelablePromise<UsersActivateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}/activate',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Deactivate user
     * Deactivate a user account. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static deactivateUser(data: UsersDeactivateUserData): CancelablePromise<UsersDeactivateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}/deactivate',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Promote user to superuser
     * Promote a user to superuser status. Requires superuser privileges.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublicOutput Successful Response
     * @throws ApiError
     */
    public static promoteUserToSuperuser(data: UsersPromoteUserToSuperuserData): CancelablePromise<UsersPromoteUserToSuperuserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}/promote',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get current user sessions
     * Get all active sessions for the current user.
     * @returns UserSessionResponse Successful Response
     * @throws ApiError
     */
    public static getCurrentUserSessions(): CancelablePromise<UsersGetCurrentUserSessionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me/sessions'
        });
    }
    
    /**
     * Invalidate all user sessions
     * Invalidate all active sessions for the current user.
     * @returns MessageOutput Successful Response
     * @throws ApiError
     */
    public static invalidateCurrentUserSessions(): CancelablePromise<UsersInvalidateCurrentUserSessionsResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me/sessions'
        });
    }
    
    /**
     * Get current user profile
     * Get the current user's profile information.
     * @returns UserProfileOutput Successful Response
     * @throws ApiError
     */
    public static getCurrentUserProfile(): CancelablePromise<UsersGetCurrentUserProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me/profile'
        });
    }
    
    /**
     * Update current user profile
     * Update the current user's profile information.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserProfileOutput Successful Response
     * @throws ApiError
     */
    public static updateCurrentUserProfile(data: UsersUpdateCurrentUserProfileData): CancelablePromise<UsersUpdateCurrentUserProfileResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/profile',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}