// This file is auto-generated by @hey-api/openapi-ts

/**
 * Generic message schema for auth operations
 */
export type AuthMessage = {
    message: string;
    success?: boolean;
};

/**
 * Schema for authentication status responses
 */
export type AuthStatusResponse = {
    authenticated: boolean;
    user_id?: (string | null);
    session_id?: (string | null);
    permissions?: Array<(string)>;
    expires_at?: (string | null);
};

export type Body_Authentication_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

/**
 * Schema for password change requests
 */
export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

/**
 * Schema for dashboard overview
 */
export type DashboardStats = {
    products: ProductStats;
    orders: OrderStats;
    recent_orders: Array<OrderPublic>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for login requests
 */
export type LoginRequest = {
    email: string;
    password: string;
    remember_me?: boolean;
    device_id?: (string | null);
};

/**
 * Schema for logout requests
 */
export type LogoutRequest = {
    all_devices?: boolean;
};

/**
 * Generic message response
 */
export type Message = {
    message: string;
};

/**
 * Schema for simple message responses
 */
export type MessageOutput = {
    /**
     * Response message
     */
    message: string;
};

/**
 * Schema for creating orders
 */
export type OrderCreate = {
    status?: string;
    notes?: (string | null);
    order_items: Array<OrderItemCreate>;
};

/**
 * Schema for creating order items
 */
export type OrderItemCreate = {
    quantity: number;
    unit_price: number;
    product_id: string;
};

/**
 * Schema for public order item data
 */
export type OrderItemPublic = {
    quantity: number;
    unit_price: number;
    id: string;
    product_id: string;
    product?: (ProductPublic | null);
};

/**
 * Schema for public order data
 */
export type OrderPublic = {
    total_amount: number;
    status?: string;
    notes?: (string | null);
    id: string;
    created_at: string;
    updated_at: string;
    customer_id: string;
    order_items?: Array<OrderItemPublic>;
};

/**
 * Schema for paginated orders response
 */
export type OrdersPublic = {
    data: Array<OrderPublic>;
    count: number;
};

/**
 * Schema for order statistics
 */
export type OrderStats = {
    total_orders: number;
    pending_orders: number;
    completed_orders: number;
    total_revenue: number;
};

/**
 * Schema for updating orders
 */
export type OrderUpdate = {
    status?: (string | null);
    notes?: (string | null);
};

/**
 * Schema for password reset confirmation
 */
export type PasswordResetConfirm = {
    token: string;
    new_password: string;
};

/**
 * Schema for password reset requests
 */
export type PasswordResetRequest = {
    email: string;
};

/**
 * Schema for password reset token responses
 */
export type PasswordResetTokenResponse = {
    message: string;
    expires_in: number;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
    is_verified?: boolean;
};

/**
 * Schema for creating a new product
 */
export type ProductCreate = {
    name: string;
    description?: (string | null);
    /**
     * Price must be greater than 0
     */
    price: number;
    is_active?: boolean;
    category: string;
    /**
     * Stock quantity must be non-negative
     */
    stock_quantity: number;
};

/**
 * Schema for public product data
 */
export type ProductPublic = {
    name: string;
    description?: (string | null);
    /**
     * Price must be greater than 0
     */
    price: number;
    is_active?: boolean;
    category: string;
    /**
     * Stock quantity must be non-negative
     */
    stock_quantity: number;
    id: string;
    created_at: string;
    updated_at: string;
    created_by_id: string;
};

/**
 * Schema for paginated products response
 */
export type ProductsPublic = {
    data: Array<ProductPublic>;
    count: number;
};

/**
 * Schema for product statistics
 */
export type ProductStats = {
    total_products: number;
    active_products: number;
    total_categories: number;
    low_stock_products: number;
};

/**
 * Schema for updating a product - all fields optional
 */
export type ProductUpdate = {
    name?: (string | null);
    description?: (string | null);
    price?: (number | null);
    is_active?: (boolean | null);
    category?: (string | null);
    stock_quantity?: (number | null);
};

/**
 * Schema for user registration
 */
export type SignupRequest = {
    email: string;
    password: string;
    first_name: string;
    last_name: string;
    terms_accepted?: boolean;
};

/**
 * Schema for signup responses
 */
export type SignupResponse = {
    user: UserPublicOutput;
    message: string;
    email_verification_required?: boolean;
};

/**
 * Schema for token refresh requests
 */
export type TokenRefreshRequest = {
    refresh_token: string;
};

/**
 * Schema for token responses
 */
export type TokenResponse = {
    access_token: string;
    refresh_token?: (string | null);
    token_type?: string;
    expires_in: number;
    scope?: (string | null);
};

/**
 * Schema for password updates
 */
export type UpdatePassword = {
    /**
     * Current password
     */
    current_password: string;
    /**
     * New password
     */
    new_password: string;
};

/**
 * Schema for creating a new user
 */
export type UserCreate = {
    /**
     * User's email address
     */
    email: string;
    /**
     * User's first name
     */
    first_name?: (string | null);
    /**
     * User's last name
     */
    last_name?: (string | null);
    /**
     * Whether the user account is active
     */
    is_active?: boolean;
    /**
     * User's password
     */
    password: string;
    /**
     * Whether the user has superuser privileges
     */
    is_superuser?: boolean;
};

/**
 * Schema for user profile output
 */
export type UserProfileOutput = {
    /**
     * Profile ID
     */
    id: string;
    /**
     * User ID
     */
    user_id: string;
    /**
     * User bio
     */
    bio?: (string | null);
    /**
     * Avatar URL
     */
    avatar_url?: (string | null);
    /**
     * Website URL
     */
    website_url?: (string | null);
    /**
     * User location
     */
    location?: (string | null);
    /**
     * Birth date
     */
    birth_date?: (string | null);
    /**
     * Phone number
     */
    phone?: (string | null);
    /**
     * User preferences
     */
    preferences?: {
        [key: string]: unknown;
    };
    /**
     * Profile creation timestamp
     */
    created_at: string;
    /**
     * Last update timestamp
     */
    updated_at?: (string | null);
};

/**
 * Schema for updating user profile
 */
export type UserProfileUpdate = {
    /**
     * User's biography
     */
    bio?: (string | null);
    /**
     * User's avatar URL
     */
    avatar_url?: (string | null);
    /**
     * User's phone number
     */
    phone?: (string | null);
    /**
     * User's location
     */
    location?: (string | null);
    /**
     * User's website URL
     */
    website?: (string | null);
    /**
     * Twitter handle
     */
    twitter_handle?: (string | null);
    /**
     * LinkedIn profile URL
     */
    linkedin_url?: (string | null);
    /**
     * GitHub username
     */
    github_username?: (string | null);
    /**
     * User's timezone
     */
    timezone?: (string | null);
    /**
     * User's preferred language
     */
    language?: (string | null);
    /**
     * User's UI theme preference
     */
    theme?: (string | null);
    /**
     * Whether profile is public
     */
    profile_public?: boolean;
    /**
     * Whether to show email publicly
     */
    show_email?: boolean;
};

/**
 * Schema for public user information (limited data)
 */
export type UserPublic = {
    /**
     * User's unique identifier
     */
    id: string;
    /**
     * User's first name
     */
    first_name?: (string | null);
    /**
     * User's last name
     */
    last_name?: (string | null);
};

/**
 * Schema for public user information output
 */
export type UserPublicOutput = {
    /**
     * User's email address
     */
    email: string;
    /**
     * User's first name
     */
    first_name?: (string | null);
    /**
     * User's last name
     */
    last_name?: (string | null);
    /**
     * Whether the user account is active
     */
    is_active?: boolean;
    /**
     * User ID
     */
    id: string;
    /**
     * Whether user is a superuser
     */
    is_superuser: boolean;
    /**
     * User creation timestamp
     */
    created_at: string;
    /**
     * Last update timestamp
     */
    updated_at?: (string | null);
};

/**
 * Schema for user session response
 */
export type UserSessionResponse = {
    /**
     * Session ID
     */
    id: string;
    /**
     * User ID
     */
    user_id: string;
    /**
     * IP address
     */
    ip_address?: (string | null);
    /**
     * User agent
     */
    user_agent?: (string | null);
    /**
     * Session active status
     */
    is_active: boolean;
    /**
     * Session creation time
     */
    created_at: string;
    /**
     * Session expiration time
     */
    expires_at: string;
    /**
     * Last activity time
     */
    last_activity?: (string | null);
};

/**
 * Schema for paginated user list output
 */
export type UsersListOutput = {
    /**
     * List of users
     */
    data: Array<UserPublicOutput>;
    /**
     * Total number of users
     */
    count: number;
    /**
     * Current page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

/**
 * Schema for updating user information
 */
export type UserUpdate = {
    /**
     * User's email address
     */
    email?: (string | null);
    /**
     * User's first name
     */
    first_name?: (string | null);
    /**
     * User's last name
     */
    last_name?: (string | null);
    /**
     * User's password
     */
    password?: (string | null);
    /**
     * Whether the user account is active
     */
    is_active?: (boolean | null);
};

/**
 * Schema for users updating their own profile
 */
export type UserUpdateMe = {
    /**
     * User's first name
     */
    first_name?: (string | null);
    /**
     * User's last name
     */
    last_name?: (string | null);
    /**
     * User's email address
     */
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AuthenticationLoginData = {
    requestBody: LoginRequest;
};

export type AuthenticationLoginResponse = ({
    [key: string]: unknown;
});

export type AuthenticationLoginAccessTokenData = {
    formData: Body_Authentication_login_access_token;
};

export type AuthenticationLoginAccessTokenResponse = (TokenResponse);

export type AuthenticationRefreshTokenData = {
    requestBody: TokenRefreshRequest;
};

export type AuthenticationRefreshTokenResponse = (TokenResponse);

export type AuthenticationSignupData = {
    requestBody: SignupRequest;
};

export type AuthenticationSignupResponse = (SignupResponse);

export type AuthenticationLogoutData = {
    requestBody: LogoutRequest;
};

export type AuthenticationLogoutResponse = (AuthMessage);

export type AuthenticationRequestPasswordResetData = {
    requestBody: PasswordResetRequest;
};

export type AuthenticationRequestPasswordResetResponse = (PasswordResetTokenResponse);

export type AuthenticationResetPasswordData = {
    requestBody: PasswordResetConfirm;
};

export type AuthenticationResetPasswordResponse = (AuthMessage);

export type AuthenticationChangePasswordData = {
    requestBody: ChangePasswordRequest;
};

export type AuthenticationChangePasswordResponse = (AuthMessage);

export type AuthenticationGetAuthStatusResponse = (AuthStatusResponse);

export type AuthenticationTestTokenResponse = (UserPublicOutput);

export type DemoCreateProductData = {
    requestBody: ProductCreate;
};

export type DemoCreateProductResponse = (ProductPublic);

export type DemoReadProductsData = {
    category?: (string | null);
    isActive?: (boolean | null);
    limit?: number;
    skip?: number;
};

export type DemoReadProductsResponse = (ProductsPublic);

export type DemoReadProductData = {
    productId: string;
};

export type DemoReadProductResponse = (ProductPublic);

export type DemoUpdateProductData = {
    productId: string;
    requestBody: ProductUpdate;
};

export type DemoUpdateProductResponse = (ProductPublic);

export type DemoDeleteProductData = {
    productId: string;
};

export type DemoDeleteProductResponse = (Message);

export type DemoCreateOrderData = {
    requestBody: OrderCreate;
};

export type DemoCreateOrderResponse = (OrderPublic);

export type DemoReadOrdersData = {
    limit?: number;
    skip?: number;
    status?: (string | null);
};

export type DemoReadOrdersResponse = (OrdersPublic);

export type DemoReadOrderData = {
    orderId: string;
};

export type DemoReadOrderResponse = (OrderPublic);

export type DemoUpdateOrderData = {
    orderId: string;
    requestBody: OrderUpdate;
};

export type DemoUpdateOrderResponse = (OrderPublic);

export type DemoGetDashboardStatsResponse = (DashboardStats);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersGetUsersData = {
    /**
     * Filter by active status
     */
    isActive?: boolean;
    /**
     * Filter by superuser status
     */
    isSuperuser?: boolean;
    /**
     * Maximum number of users to return
     */
    limit?: number;
    /**
     * Number of users to skip
     */
    skip?: number;
};

export type UsersGetUsersResponse = (UsersListOutput);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublicOutput);

export type UsersGetCurrentUserInfoResponse = (UserPublicOutput);

export type UsersDeleteCurrentUserResponse = (MessageOutput);

export type UsersUpdateCurrentUserData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateCurrentUserResponse = (UserPublicOutput);

export type UsersUpdateCurrentUserPasswordData = {
    requestBody: UpdatePassword;
};

export type UsersUpdateCurrentUserPasswordResponse = (MessageOutput);

export type UsersGetUserByIdData = {
    userId: string;
};

export type UsersGetUserByIdResponse = (UserPublicOutput);

export type UsersUpdateUserByIdData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserByIdResponse = (UserPublicOutput);

export type UsersDeleteUserByIdData = {
    userId: string;
};

export type UsersDeleteUserByIdResponse = (MessageOutput);

export type UsersActivateUserData = {
    userId: string;
};

export type UsersActivateUserResponse = (UserPublicOutput);

export type UsersDeactivateUserData = {
    userId: string;
};

export type UsersDeactivateUserResponse = (UserPublicOutput);

export type UsersPromoteUserToSuperuserData = {
    userId: string;
};

export type UsersPromoteUserToSuperuserResponse = (UserPublicOutput);

export type UsersGetCurrentUserSessionsResponse = (Array<UserSessionResponse>);

export type UsersInvalidateCurrentUserSessionsResponse = (MessageOutput);

export type UsersGetCurrentUserProfileResponse = (UserProfileOutput);

export type UsersUpdateCurrentUserProfileData = {
    requestBody: UserProfileUpdate;
};

export type UsersUpdateCurrentUserProfileResponse = (UserProfileOutput);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);